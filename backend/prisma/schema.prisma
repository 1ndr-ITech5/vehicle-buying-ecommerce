generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  createdAt       DateTime  @default(now())
  refreshToken  String?
  vehicleAds      VehicleAd[]
  partAds         PartAd[]
  reservations    Reservation[]
  savedVehicleAds SavedVehicleAd[]
  savedPartAds    SavedPartAd[]
}

model VehicleAd {
  id            String    @id @default(cuid())
  name          String
  make          String
  model         String
  year          Int
  price         Float
  mileage       Int
  transmission  String?
  fuel          String
  color         String
  location      String
  phone         String
  description   String
  imageUrl      String?
  power         Int
  engine        String
  carPlates     String
  package       String
  vehicleCategory String
  createdAt     DateTime  @default(now())
  
  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String

  reserved      Boolean   @default(false)
  reservations  Reservation[]
  historyCheck  Json?
  insuranceBaseRate Float?
  sellOnCredit  Boolean   @default(false)
  modifiedOnce  Boolean   @default(false)
  savedBy       SavedVehicleAd[]
}

model PartCategory {
  id              String    @id @default(cuid())
  name            String    @unique
  icon            String?
  subCategories   PartSubCategory[]
}

model PartSubCategory {
  id              String    @id @default(cuid())
  name            String
  partCount       Int
  
  category        PartCategory @relation(fields: [categoryId], references: [id])
  categoryId      String
  
  parts           PartAd[]
}

model PartAd {
  id                      String    @id @default(cuid())
  name                    String
  price                   Float
  location                String
  phone                   String
  imageUrl                String?
  condition               String
  description             String
  createdAt               DateTime  @default(now())
  
  seller                  User      @relation(fields: [sellerId], references: [id])
  sellerId                String
  
  subCategory             PartSubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId           String

  compatibleModels        String?
  detailedCompatibility   String?
  installationDifficulty  String?
  year                    Int?
  package                 String?
  savedBy                 SavedPartAd[]

  carMark                 String?
  carModel                String?
  vehicleType             String?
}

model Review {
  id        String   @id @default(cuid())
  name      String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Reservation {
  id              String    @id @default(cuid())
  name            String
  phone           String
  email           String
  createdAt       DateTime  @default(now())

  vehicle         VehicleAd @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId       String

  user            User      @relation(fields: [userId], references: [id])
  userId          String
}

model SavedVehicleAd {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  vehicleAd   VehicleAd @relation(fields: [vehicleAdId], references: [id], onDelete: Cascade)
  vehicleAdId String
  createdAt   DateTime  @default(now())

  @@unique([userId, vehicleAdId])
}

model SavedPartAd {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  partAd    PartAd   @relation(fields: [partAdId], references: [id], onDelete: Cascade)
  partAdId  String
  createdAt DateTime @default(now())

  @@unique([userId, partAdId])
}